package com.github.alexanderfefelov.userside.network.api.db.repository

import scalikejdbc._
import org.joda.time.{LocalDate, DateTime}
import scalikejdbc.jodatime.JodaParameterBinderFactory._
import scalikejdbc.jodatime.JodaTypeBinder._

case class PblBase(
  code: Int,
  codeti: Option[String] = None,
  groupn: Option[String] = None,
  isreg: Option[Short] = None,
  logname: Option[String] = None,
  dognumber: Option[String] = None,
  datedog2: Option[String] = None,
  fio: Option[String] = None,
  pass: Option[String] = None,
  housec: Option[Int] = None,
  podezd: Option[Int] = None,
  housecode: Option[String] = None,
  floor: Option[String] = None,
  apart: Option[String] = None,
  apartB: Option[String] = None,
  email: Option[String] = None,
  tel: Option[String] = None,
  telmob: Option[String] = None,
  dop: Option[String] = None,
  dop2: Option[String] = None,
  balans: Option[BigDecimal] = None,
  kredit: Option[BigDecimal] = None,
  skidka: Option[Short] = None,
  dateplus: Option[LocalDate] = None,
  lastact: Option[DateTime] = None,
  lastping: Option[DateTime] = None,
  workstatus: Option[Short] = None,
  rxtraf: Option[String] = None,
  txtraf: Option[String] = None,
  dateinnet: Option[LocalDate] = None,
  lastlogontime: Option[DateTime] = None,
  lastlogofftime: Option[DateTime] = None,
  logonhisip: Option[BigDecimal] = None,
  agentVer: Option[String] = None,
  agentLastvisit: Option[DateTime] = None,
  agentData: Option[String] = None,
  userlang: Option[String] = None,
  isvip: Option[Short] = None,
  lastvisit: Option[DateTime] = None,
  logonip: Option[BigDecimal] = None,
  dateakciya: Option[LocalDate] = None,
  metr: Option[Short] = None,
  dateadd: Option[DateTime] = None,
  billcode: Option[Int] = None,
  notinbilling: Option[Short] = None,
  datepaid: Option[LocalDate] = None,
  tarifDatestart: Option[LocalDate] = None,
  accF: Option[Int] = None,
  parentcode: Option[Int] = None,
  notsms: Option[Short] = None,
  disable: Option[Short] = None,
  datechangestatus: Option[LocalDate] = None,
  ls: Option[String] = None,
  typerUpdact: Option[Short] = None,
  lat: Option[BigDecimal] = None,
  lon: Option[BigDecimal] = None) {

  def save()(implicit session: DBSession = PblBase.autoSession): PblBase = PblBase.save(this)(session)

  def destroy()(implicit session: DBSession = PblBase.autoSession): Int = PblBase.destroy(this)(session)

}


object PblBase extends SQLSyntaxSupport[PblBase] {

  override val schemaName = Some("userside3")

  override val tableName = "pbl_base"

  override val columns = Seq("code", "codeti", "groupn", "isreg", "logname", "dognumber", "datedog2", "fio", "pass", "housec", "podezd", "housecode", "floor", "apart", "apart_b", "email", "tel", "telmob", "dop", "dop2", "balans", "kredit", "skidka", "dateplus", "lastact", "lastping", "workstatus", "rxtraf", "txtraf", "dateinnet", "lastlogontime", "lastlogofftime", "logonhisip", "agent_ver", "agent_lastvisit", "agent_data", "userlang", "isvip", "lastvisit", "logonip", "dateakciya", "metr", "dateadd", "billcode", "notinbilling", "datepaid", "tarif_datestart", "acc_f", "parentcode", "notsms", "disable", "datechangestatus", "ls", "typer_updact", "lat", "lon")

  def apply(pb: SyntaxProvider[PblBase])(rs: WrappedResultSet): PblBase = autoConstruct(rs, pb)
  def apply(pb: ResultName[PblBase])(rs: WrappedResultSet): PblBase = autoConstruct(rs, pb)

  val pb = PblBase.syntax("pb")

  override val autoSession = AutoSession

  def find(code: Int)(implicit session: DBSession = autoSession): Option[PblBase] = {
    withSQL {
      select.from(PblBase as pb).where.eq(pb.code, code)
    }.map(PblBase(pb.resultName)).single.apply()
  }

  def findAll()(implicit session: DBSession = autoSession): List[PblBase] = {
    withSQL(select.from(PblBase as pb)).map(PblBase(pb.resultName)).list.apply()
  }

  def countAll()(implicit session: DBSession = autoSession): Long = {
    withSQL(select(sqls.count).from(PblBase as pb)).map(rs => rs.long(1)).single.apply().get
  }

  def findBy(where: SQLSyntax)(implicit session: DBSession = autoSession): Option[PblBase] = {
    withSQL {
      select.from(PblBase as pb).where.append(where)
    }.map(PblBase(pb.resultName)).single.apply()
  }

  def findAllBy(where: SQLSyntax)(implicit session: DBSession = autoSession): List[PblBase] = {
    withSQL {
      select.from(PblBase as pb).where.append(where)
    }.map(PblBase(pb.resultName)).list.apply()
  }

  def countBy(where: SQLSyntax)(implicit session: DBSession = autoSession): Long = {
    withSQL {
      select(sqls.count).from(PblBase as pb).where.append(where)
    }.map(_.long(1)).single.apply().get
  }

  def create(
    codeti: Option[String] = None,
    groupn: Option[String] = None,
    isreg: Option[Short] = None,
    logname: Option[String] = None,
    dognumber: Option[String] = None,
    datedog2: Option[String] = None,
    fio: Option[String] = None,
    pass: Option[String] = None,
    housec: Option[Int] = None,
    podezd: Option[Int] = None,
    housecode: Option[String] = None,
    floor: Option[String] = None,
    apart: Option[String] = None,
    apartB: Option[String] = None,
    email: Option[String] = None,
    tel: Option[String] = None,
    telmob: Option[String] = None,
    dop: Option[String] = None,
    dop2: Option[String] = None,
    balans: Option[BigDecimal] = None,
    kredit: Option[BigDecimal] = None,
    skidka: Option[Short] = None,
    dateplus: Option[LocalDate] = None,
    lastact: Option[DateTime] = None,
    lastping: Option[DateTime] = None,
    workstatus: Option[Short] = None,
    rxtraf: Option[String] = None,
    txtraf: Option[String] = None,
    dateinnet: Option[LocalDate] = None,
    lastlogontime: Option[DateTime] = None,
    lastlogofftime: Option[DateTime] = None,
    logonhisip: Option[BigDecimal] = None,
    agentVer: Option[String] = None,
    agentLastvisit: Option[DateTime] = None,
    agentData: Option[String] = None,
    userlang: Option[String] = None,
    isvip: Option[Short] = None,
    lastvisit: Option[DateTime] = None,
    logonip: Option[BigDecimal] = None,
    dateakciya: Option[LocalDate] = None,
    metr: Option[Short] = None,
    dateadd: Option[DateTime] = None,
    billcode: Option[Int] = None,
    notinbilling: Option[Short] = None,
    datepaid: Option[LocalDate] = None,
    tarifDatestart: Option[LocalDate] = None,
    accF: Option[Int] = None,
    parentcode: Option[Int] = None,
    notsms: Option[Short] = None,
    disable: Option[Short] = None,
    datechangestatus: Option[LocalDate] = None,
    ls: Option[String] = None,
    typerUpdact: Option[Short] = None,
    lat: Option[BigDecimal] = None,
    lon: Option[BigDecimal] = None)(implicit session: DBSession = autoSession): PblBase = {
    val generatedKey = withSQL {
      insert.into(PblBase).namedValues(
        column.codeti -> codeti,
        column.groupn -> groupn,
        column.isreg -> isreg,
        column.logname -> logname,
        column.dognumber -> dognumber,
        column.datedog2 -> datedog2,
        column.fio -> fio,
        column.pass -> pass,
        column.housec -> housec,
        column.podezd -> podezd,
        column.housecode -> housecode,
        column.floor -> floor,
        column.apart -> apart,
        column.apartB -> apartB,
        column.email -> email,
        column.tel -> tel,
        column.telmob -> telmob,
        column.dop -> dop,
        column.dop2 -> dop2,
        column.balans -> balans,
        column.kredit -> kredit,
        column.skidka -> skidka,
        column.dateplus -> dateplus,
        column.lastact -> lastact,
        column.lastping -> lastping,
        column.workstatus -> workstatus,
        column.rxtraf -> rxtraf,
        column.txtraf -> txtraf,
        column.dateinnet -> dateinnet,
        column.lastlogontime -> lastlogontime,
        column.lastlogofftime -> lastlogofftime,
        column.logonhisip -> logonhisip,
        column.agentVer -> agentVer,
        column.agentLastvisit -> agentLastvisit,
        column.agentData -> agentData,
        column.userlang -> userlang,
        column.isvip -> isvip,
        column.lastvisit -> lastvisit,
        column.logonip -> logonip,
        column.dateakciya -> dateakciya,
        column.metr -> metr,
        column.dateadd -> dateadd,
        column.billcode -> billcode,
        column.notinbilling -> notinbilling,
        column.datepaid -> datepaid,
        column.tarifDatestart -> tarifDatestart,
        column.accF -> accF,
        column.parentcode -> parentcode,
        column.notsms -> notsms,
        column.disable -> disable,
        column.datechangestatus -> datechangestatus,
        column.ls -> ls,
        column.typerUpdact -> typerUpdact,
        column.lat -> lat,
        column.lon -> lon
      )
    }.updateAndReturnGeneratedKey.apply()

    PblBase(
      code = generatedKey.toInt,
      codeti = codeti,
      groupn = groupn,
      isreg = isreg,
      logname = logname,
      dognumber = dognumber,
      datedog2 = datedog2,
      fio = fio,
      pass = pass,
      housec = housec,
      podezd = podezd,
      housecode = housecode,
      floor = floor,
      apart = apart,
      apartB = apartB,
      email = email,
      tel = tel,
      telmob = telmob,
      dop = dop,
      dop2 = dop2,
      balans = balans,
      kredit = kredit,
      skidka = skidka,
      dateplus = dateplus,
      lastact = lastact,
      lastping = lastping,
      workstatus = workstatus,
      rxtraf = rxtraf,
      txtraf = txtraf,
      dateinnet = dateinnet,
      lastlogontime = lastlogontime,
      lastlogofftime = lastlogofftime,
      logonhisip = logonhisip,
      agentVer = agentVer,
      agentLastvisit = agentLastvisit,
      agentData = agentData,
      userlang = userlang,
      isvip = isvip,
      lastvisit = lastvisit,
      logonip = logonip,
      dateakciya = dateakciya,
      metr = metr,
      dateadd = dateadd,
      billcode = billcode,
      notinbilling = notinbilling,
      datepaid = datepaid,
      tarifDatestart = tarifDatestart,
      accF = accF,
      parentcode = parentcode,
      notsms = notsms,
      disable = disable,
      datechangestatus = datechangestatus,
      ls = ls,
      typerUpdact = typerUpdact,
      lat = lat,
      lon = lon)
  }

  def batchInsert(entities: collection.Seq[PblBase])(implicit session: DBSession = autoSession): List[Int] = {
    val params: collection.Seq[Seq[(Symbol, Any)]] = entities.map(entity =>
      Seq(
        'codeti -> entity.codeti,
        'groupn -> entity.groupn,
        'isreg -> entity.isreg,
        'logname -> entity.logname,
        'dognumber -> entity.dognumber,
        'datedog2 -> entity.datedog2,
        'fio -> entity.fio,
        'pass -> entity.pass,
        'housec -> entity.housec,
        'podezd -> entity.podezd,
        'housecode -> entity.housecode,
        'floor -> entity.floor,
        'apart -> entity.apart,
        'apartB -> entity.apartB,
        'email -> entity.email,
        'tel -> entity.tel,
        'telmob -> entity.telmob,
        'dop -> entity.dop,
        'dop2 -> entity.dop2,
        'balans -> entity.balans,
        'kredit -> entity.kredit,
        'skidka -> entity.skidka,
        'dateplus -> entity.dateplus,
        'lastact -> entity.lastact,
        'lastping -> entity.lastping,
        'workstatus -> entity.workstatus,
        'rxtraf -> entity.rxtraf,
        'txtraf -> entity.txtraf,
        'dateinnet -> entity.dateinnet,
        'lastlogontime -> entity.lastlogontime,
        'lastlogofftime -> entity.lastlogofftime,
        'logonhisip -> entity.logonhisip,
        'agentVer -> entity.agentVer,
        'agentLastvisit -> entity.agentLastvisit,
        'agentData -> entity.agentData,
        'userlang -> entity.userlang,
        'isvip -> entity.isvip,
        'lastvisit -> entity.lastvisit,
        'logonip -> entity.logonip,
        'dateakciya -> entity.dateakciya,
        'metr -> entity.metr,
        'dateadd -> entity.dateadd,
        'billcode -> entity.billcode,
        'notinbilling -> entity.notinbilling,
        'datepaid -> entity.datepaid,
        'tarifDatestart -> entity.tarifDatestart,
        'accF -> entity.accF,
        'parentcode -> entity.parentcode,
        'notsms -> entity.notsms,
        'disable -> entity.disable,
        'datechangestatus -> entity.datechangestatus,
        'ls -> entity.ls,
        'typerUpdact -> entity.typerUpdact,
        'lat -> entity.lat,
        'lon -> entity.lon))
    SQL("""insert into pbl_base(
      codeti,
      groupn,
      isreg,
      logname,
      dognumber,
      datedog2,
      fio,
      pass,
      housec,
      podezd,
      housecode,
      floor,
      apart,
      apart_b,
      email,
      tel,
      telmob,
      dop,
      dop2,
      balans,
      kredit,
      skidka,
      dateplus,
      lastact,
      lastping,
      workstatus,
      rxtraf,
      txtraf,
      dateinnet,
      lastlogontime,
      lastlogofftime,
      logonhisip,
      agent_ver,
      agent_lastvisit,
      agent_data,
      userlang,
      isvip,
      lastvisit,
      logonip,
      dateakciya,
      metr,
      dateadd,
      billcode,
      notinbilling,
      datepaid,
      tarif_datestart,
      acc_f,
      parentcode,
      notsms,
      disable,
      datechangestatus,
      ls,
      typer_updact,
      lat,
      lon
    ) values (
      {codeti},
      {groupn},
      {isreg},
      {logname},
      {dognumber},
      {datedog2},
      {fio},
      {pass},
      {housec},
      {podezd},
      {housecode},
      {floor},
      {apart},
      {apartB},
      {email},
      {tel},
      {telmob},
      {dop},
      {dop2},
      {balans},
      {kredit},
      {skidka},
      {dateplus},
      {lastact},
      {lastping},
      {workstatus},
      {rxtraf},
      {txtraf},
      {dateinnet},
      {lastlogontime},
      {lastlogofftime},
      {logonhisip},
      {agentVer},
      {agentLastvisit},
      {agentData},
      {userlang},
      {isvip},
      {lastvisit},
      {logonip},
      {dateakciya},
      {metr},
      {dateadd},
      {billcode},
      {notinbilling},
      {datepaid},
      {tarifDatestart},
      {accF},
      {parentcode},
      {notsms},
      {disable},
      {datechangestatus},
      {ls},
      {typerUpdact},
      {lat},
      {lon}
    )""").batchByName(params: _*).apply[List]()
  }

  def save(entity: PblBase)(implicit session: DBSession = autoSession): PblBase = {
    withSQL {
      update(PblBase).set(
        column.code -> entity.code,
        column.codeti -> entity.codeti,
        column.groupn -> entity.groupn,
        column.isreg -> entity.isreg,
        column.logname -> entity.logname,
        column.dognumber -> entity.dognumber,
        column.datedog2 -> entity.datedog2,
        column.fio -> entity.fio,
        column.pass -> entity.pass,
        column.housec -> entity.housec,
        column.podezd -> entity.podezd,
        column.housecode -> entity.housecode,
        column.floor -> entity.floor,
        column.apart -> entity.apart,
        column.apartB -> entity.apartB,
        column.email -> entity.email,
        column.tel -> entity.tel,
        column.telmob -> entity.telmob,
        column.dop -> entity.dop,
        column.dop2 -> entity.dop2,
        column.balans -> entity.balans,
        column.kredit -> entity.kredit,
        column.skidka -> entity.skidka,
        column.dateplus -> entity.dateplus,
        column.lastact -> entity.lastact,
        column.lastping -> entity.lastping,
        column.workstatus -> entity.workstatus,
        column.rxtraf -> entity.rxtraf,
        column.txtraf -> entity.txtraf,
        column.dateinnet -> entity.dateinnet,
        column.lastlogontime -> entity.lastlogontime,
        column.lastlogofftime -> entity.lastlogofftime,
        column.logonhisip -> entity.logonhisip,
        column.agentVer -> entity.agentVer,
        column.agentLastvisit -> entity.agentLastvisit,
        column.agentData -> entity.agentData,
        column.userlang -> entity.userlang,
        column.isvip -> entity.isvip,
        column.lastvisit -> entity.lastvisit,
        column.logonip -> entity.logonip,
        column.dateakciya -> entity.dateakciya,
        column.metr -> entity.metr,
        column.dateadd -> entity.dateadd,
        column.billcode -> entity.billcode,
        column.notinbilling -> entity.notinbilling,
        column.datepaid -> entity.datepaid,
        column.tarifDatestart -> entity.tarifDatestart,
        column.accF -> entity.accF,
        column.parentcode -> entity.parentcode,
        column.notsms -> entity.notsms,
        column.disable -> entity.disable,
        column.datechangestatus -> entity.datechangestatus,
        column.ls -> entity.ls,
        column.typerUpdact -> entity.typerUpdact,
        column.lat -> entity.lat,
        column.lon -> entity.lon
      ).where.eq(column.code, entity.code)
    }.update.apply()
    entity
  }

  def destroy(entity: PblBase)(implicit session: DBSession = autoSession): Int = {
    withSQL { delete.from(PblBase).where.eq(column.code, entity.code) }.update.apply()
  }

}
